{"pages":[{"title":"about","text":"一个沉迷于IT技术的机械工程师 海贼迷 相信努力和梦想一定能创造更美好的明天~","link":"/about/index.html"}],"posts":[{"title":"Python时间格式总结","text":"time模块 time模块下时间主要有三种表现形式： 时间戳(timestamp)，注意这里所说的时间戳本质上是个数字(int/float)，与Pandas中pandas._libs.tslibs.timestamps.Timestamp的timestamp是不一样的； 时间元组(struct_time); 格式化时间，格式化时间还包括自定义格式和固定格式； 以上表现形式生成和相互转换的方式： 时间戳(ts) 时间元组(st) 自定义格式(ft) 固定格式 时间戳 time.time() time.localtime(ts)time.gmtime(ts) NA time.ctime(ts) 时间元组 time.mktime(st) time.localtime()time.gmtime() time.strptime(fmt, st) time.asctime(st) 自定义格式 NA NA time.strftime(fmt) NA 固定格式 NA NA NA NA datetime.date类 date类，表示日期的类： 创建方法：datetime.date(year, month, day) 主要属性：year，month，day 主要方法： date.timetuple(date) —— 返回日期的时间元组； date.replace(year, month, day) —— 替换date对象中的year/month/day，并返回替换后的date对象； date.weekday(date) —— 返回日期对应的星期，星期一返回0，星期二返回1，以此类推； date.isoweekday(date) —— 返回日期对应的星期，星期一返回1，星期二返回2，以此类推； date.iscalendar(date) —— 返回日期对应的元组 ； date.isoformat(date) —— 返回日期对应格式的字符串； date.fromtimestamp(timestamp) —— 根据给定的时间戳返回一个date对象； date.today() —— 返回当地日期的date对象，注意这里返回的不是timestamp对象； datetime.time类 time类，表示时间的类： 创建方法：datetime.time(hour, minute, second, microsecond, tzinfo) 主要属性：hour, minute, second, microsecond, tzinfo 主要方法： time.replace(hour, minute, second, microsecond, tzinfo) —— 替换time对象中的时分秒微秒和时区，并返回替换后的time对象； time.isofomr(time)，根据time对象返回 hour:minute:second格式的时间； time.strftime(fmt)，根据指定的格式，返回time对象的自定义格式化时间的字符串； datetime.datetime类 datetime类，饱含date和time的所有信息。 主要属性：year、month、day、hour、minute、second、microsecond、tzinfo； 主要方法： datetime.date()/time()，获取date/time对象； datetime.today()，获取表示当前本地时间的datetime对象； datetime.now(tz)，获取表示当前本地时间的datetime对象，如果提供时区参数tz，则获取指定时区的datetime对象； datetime.utcnow()，获取表示当前utc时间的datetime对象； datetime.fromtimestamp(timestamp, tz)，根据时间戳创建一个datetime对象，如果指定了tz参数，则返回指定时区的对象； datetime.utcfromtimestamp(timestamp)，根据时间戳创建一个datetime对象； datetime.combine(date, time)，根据date和time对象创建一个datetime对象； datetime.strptime(date_string, format)，将格式字符串转换为datetime对象； datetime.replace(year, month, day, hour, minute, second, microsecond, tzinfo)，替代datetime中的年月日时分秒微秒和时区，并返回替换后的datetime对象； datetime.timetuple(datetime)，根据datetime对象，返回对应的时间元组； datetime.utctimetuple(datetime)，根据datetime对象，返回对应的utc时间的时间元组； datetime.weekday(datetime)，返回datetime对象所对应的星期，星期一对应于0，星期二对应1，以此类推； datetime.isoweekday(datetime)，返回datetime对象所对应的星期，星期一对应于1，星期二对应2，以此类推； datetime.isocalendar (datetime)，返回datetime对象说对应的iso日历； datetime.isoformat(datetime)，返回datetime对象所对应的iso格式的时间； datetime.ctime()，返回datetime对象所对应的c格式时间的字符串； datetime.strftime(format)，返回datetime对象所对应的指定格式时间的字符串； 参考文献：https://www.cnblogs.com/tkqasn/p/6001134.html https://my.oschina.net/whp/blog/130710","link":"/2020/09/20/Python%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93/"},{"title":"pandas.dataframe切片总结","text":"df[‘column_name’] ，df[row_start_index, row_end_index] 可以通过df[[‘column_name1’, ‘column_name2’]]的方式来指定想选择的单个或多个列； 可以通过df[df.index == ‘index’]来选择指定的单个行； 可以通过行的序号来指定想选择的单个或多个行； 不能通过df[‘index’]的方式来选择指定的行； 不能通过列的序号来指定想选择的列； loc函数 可以通过df.loc[[‘index_name1’,’index_name2’], [‘column_name1’, ‘column_name2’]]来指定想选择的单个或多个行和列; 可以通过行的序号来指定想选择的单个或多个行； 可以通过df.loc[df.index == ‘index’]来选择指定的单个行； iloc函数 可以通过df.iloc[df.index == ‘index’]来选择指定的单个行； 可以通过行列的序号来指定想要选择的行和列；","link":"/2020/09/20/pandas-dataframe%E5%88%87%E7%89%87%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Pandas","slug":"Pandas","link":"/tags/Pandas/"}],"categories":[]}